/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import Business.FileRead;
import Business.Stopwords;
import com.cosine.similarity.DocumentParser;
import java.awt.CardLayout;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;

/**
 *
 * @author Jigar
 */
public class RelevantDocs extends javax.swing.JPanel {

    /**
     * Creates new form RelevantDocs
     */
    JPanel upc;
    //DocumentParser dp;
    Stopwords sw;
    FileRead fr;
    public RelevantDocs(JPanel upc,FileRead fr) {
        initComponents();
        this.upc=upc;
        sw=new Stopwords();
        this.fr=fr;
        //this.dp=dp;

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        pathJTextField = new javax.swing.JTextField();
        createIndexJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        jLabel1.setText("Enter the path to your files");

        createIndexJButton.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        createIndexJButton.setText("Go for it!");
        createIndexJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createIndexJButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N
        jLabel2.setText("VECTOR SPACE MODEL");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pathJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(createIndexJButton)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(pathJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(createIndexJButton)
                .addContainerGap(193, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createIndexJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createIndexJButtonActionPerformed
        
        try {
            // TODO add your handling code here:
            String path=pathJTextField.getText();
            DocumentParser dp=new DocumentParser();
            
//            File[] listOfFiles=dp.fileRead(path);
//            List<String[]> docs=new ArrayList<>();
//            String filterData[] = null;            
//            String[] data = null;
//            boolean flag;
//            for (int i = 0; i < listOfFiles.length; i++) {
//                
//                if (listOfFiles[i].isFile() && listOfFiles[i].getName().endsWith(".txt")) {
//                    
//                    String content=dp.readInput(listOfFiles[i]);
//                    data = content.split("\\W+");
//                    filterData=new String[data.length];
//                }
//                for(String word:data){
//                    flag=sw.is(word);
//                    if(!flag)
//                        filterData[i++]=word;
//                }
//                docs.add(filterData);
//            }
            
            //time to upload the files
            Long startTime1 = System.nanoTime();
            System.out.println("startTime1"+startTime1);
                List<String[]> docs=dp.parseFiles(path);
            Long endTime1=(System.nanoTime()-startTime1)/1000000000;
            System.out.println("endTime1"+endTime1);
            
            //time to create the index and retrieve back the cosine Results
            Long startTime2 = System.nanoTime();
            System.out.println("startTime2"+startTime1);
                dp.tfIdfCalculator(); //calculates tfidf
                Double[] cosineResults=dp.getCosineSimilarity(); //calculated cosine similarity
            Long endTime2=(System.nanoTime()-startTime2)/1000000000;
            System.out.println("endTime2"+endTime2);
            
            RelevantDocResults rdr = new RelevantDocResults(upc, endTime1,endTime2, cosineResults, dp, fr);
            upc.add("RelevantDocResults",rdr);
            CardLayout layout = (CardLayout)upc.getLayout();
            layout.next(upc);
            
        } catch (IOException ex) {
            Logger.getLogger(RelevantDocs.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        

    }//GEN-LAST:event_createIndexJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createIndexJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField pathJTextField;
    // End of variables declaration//GEN-END:variables
}
